import{Clock as e,PerspectiveCamera as t,Scene as i,WebGLRenderer as s,SRGBColorSpace as n,MathUtils as o,Vector2 as r,Vector3 as a,MeshPhysicalMaterial as c,ShaderChunk as h,Color as l,Object3D as m,InstancedMesh as d,PMREMGenerator as p,SphereGeometry as g,AmbientLight as f,PointLight as u,Raycaster as v,Plane as y}from"https://cdn.jsdelivr.net/npm/three@0.170.0/+esm";import{RoomEnvironment as w}from"https://cdn.jsdelivr.net/npm/three@0.170.0/examples/jsm/environments/RoomEnvironment.js/+esm";class z{#e;canvas;camera;cameraMinAspect;cameraMaxAspect;cameraFov;maxPixelRatio;minPixelRatio;scene;renderer;#t;size={width:0,height:0,wWidth:0,wHeight:0,ratio:0,pixelRatio:0};render=this.#i;onBeforeRender=()=>{};onAfterRender=()=>{};onAfterResize=()=>{};#s=!1;#n=!1;isDisposed=!1;#o;#r;#a;#c=new e;#h={elapsed:0,delta:0};#l;constructor(e){this.#e={...e},this.#m(),this.#d(),this.#p(),this.resize(),this.#g()}#m(){this.camera=new t,this.cameraFov=this.camera.fov}#d(){this.scene=new i}#p(){this.#e.canvas?this.canvas=this.#e.canvas:this.#e.id?this.canvas=document.getElementById(this.#e.id):console.error("Three: Missing canvas or id parameter"),this.canvas.style.display="block";const e={canvas:this.canvas,powerPreference:"high-performance",...this.#e.rendererOptions??{}};this.renderer=new s(e),this.renderer.outputColorSpace=n}#g(){this.#e.size instanceof Object||(window.addEventListener("resize",this.#f.bind(this)),"parent"===this.#e.size&&(this.#r=new ResizeObserver(this.#f.bind(this)),this.#r.observe(this.canvas.parentNode))),this.#o=new IntersectionObserver(this.#u.bind(this),{root:null,rootMargin:"0px",threshold:0}),this.#o.observe(this.canvas),document.addEventListener("visibilitychange",this.#v.bind(this))}#y(){window.removeEventListener("resize",this.#f.bind(this)),this.#r?.disconnect(),this.#o?.disconnect(),document.removeEventListener("visibilitychange",this.#v.bind(this))}#u(e){this.#s=e[0].isIntersecting,this.#s?this.#w():this.#z()}#v(e){this.#s&&(document.hidden?this.#z():this.#w())}#f(){this.#a&&clearTimeout(this.#a),this.#a=setTimeout(this.resize.bind(this),100)}resize(){let e,t;this.#e.size instanceof Object?(e=this.#e.size.width,t=this.#e.size.height):"parent"===this.#e.size&&this.canvas.parentNode?(e=this.canvas.parentNode.offsetWidth,t=this.canvas.parentNode.offsetHeight):(e=window.innerWidth,t=window.innerHeight),this.size.width=e,this.size.height=t,this.size.ratio=e/t,this.#x(),this.#b(),this.onAfterResize(this.size)}#x(){this.camera.aspect=this.size.width/this.size.height,this.camera.isPerspectiveCamera&&this.cameraFov&&(this.cameraMinAspect&&this.camera.aspect<this.cameraMinAspect?this.#R(this.cameraMinAspect):this.cameraMaxAspect&&this.camera.aspect>this.cameraMaxAspect?this.#R(this.cameraMaxAspect):this.camera.fov=this.cameraFov),this.camera.updateProjectionMatrix(),this.updateWorldSize()}#R(e){const t=Math.tan(o.degToRad(this.cameraFov/2))/(this.camera.aspect/e);this.camera.fov=2*o.radToDeg(Math.atan(t))}updateWorldSize(){if(this.camera.isPerspectiveCamera){const e=this.camera.fov*Math.PI/180;this.size.wHeight=2*Math.tan(e/2)*this.camera.position.length(),this.size.wWidth=this.size.wHeight*this.camera.aspect}else this.camera.isOrthographicCamera&&(this.size.wHeight=this.camera.top-this.camera.bottom,this.size.wWidth=this.camera.right-this.camera.left)}#b(){this.renderer.setSize(this.size.width,this.size.height),this.#t?.setSize(this.size.width,this.size.height);let e=window.devicePixelRatio;this.maxPixelRatio&&e>this.maxPixelRatio?e=this.maxPixelRatio:this.minPixelRatio&&e<this.minPixelRatio&&(e=this.minPixelRatio),this.renderer.setPixelRatio(e),this.size.pixelRatio=e}get postprocessing(){return this.#t}set postprocessing(e){this.#t=e,this.render=e.render.bind(e)}#w(){if(this.#n)return;this.render||(this.render=this.#i);const e=()=>{this.#l=requestAnimationFrame(e),this.#h.delta=this.#c.getDelta(),this.#h.elapsed+=this.#h.delta,this.onBeforeRender(this.#h),this.render(),this.onAfterRender(this.#h)};this.#n=!0,this.#c.start(),e()}#z(){this.#n&&(cancelAnimationFrame(this.#l),this.#n=!1,this.#c.stop())}#i(){this.renderer.render(this.scene,this.camera)}dispose(){this.#y(),this.#z(),this.scene.traverse((e=>{e.isMesh&&"object"==typeof e.material&&(Object.keys(e.material).forEach((t=>{const i=e.material[t];null!==i&&"object"==typeof i&&"function"==typeof i.dispose&&i.dispose()})),e.material.dispose(),e.geometry.dispose())})),this.scene.clear(),this.renderer.dispose(),this.isDisposed=!0}}const x=new Map,b=new r;let R=!1;function A(e){const t={position:new r,nPosition:new r,hover:!1,onEnter(){},onMove(){},onClick(){},onLeave(){},...e};return function(e,t){x.has(e)||(x.set(e,t),R||(document.body.addEventListener("pointermove",S),document.body.addEventListener("pointerleave",C),document.body.addEventListener("click",M),R=!0))}(e.domElement,t),t.dispose=()=>{var t;t=e.domElement,x.delete(t),0===x.size&&(document.body.removeEventListener("pointermove",S),document.body.removeEventListener("pointerleave",C),R=!1)},t}function S(e){b.x=e.clientX,b.y=e.clientY;for(const[e,t]of x){const i=e.getBoundingClientRect();P(i)?(L(t,i),t.hover||(t.hover=!0,t.onEnter(t)),t.onMove(t)):t.hover&&(t.hover=!1,t.onLeave(t))}}function M(e){b.x=e.clientX,b.y=e.clientY;for(const[e,t]of x){const i=e.getBoundingClientRect();L(t,i),P(i)&&t.onClick(t)}}function C(){for(const e of x.values())e.hover&&(e.hover=!1,e.onLeave(e))}function L(e,t){const{position:i,nPosition:s}=e;i.x=b.x-t.left,i.y=b.y-t.top,s.x=i.x/t.width*2-1,s.y=-i.y/t.height*2+1}function P(e){const{x:t,y:i}=b,{left:s,top:n,width:o,height:r}=e;return t>=s&&t<=s+o&&i>=n&&i<=n+r}const{randFloat:D,randFloatSpread:k}=o,E=new a,F=new a,I=new a,O=new a,V=new a,N=new a,B=new a,j=new a,_=new a,H=new a;class W{constructor(e){this.config=e,this.positionData=new Float32Array(3*e.count).fill(0),this.velocityData=new Float32Array(3*e.count).fill(0),this.sizeData=new Float32Array(e.count).fill(1),this.center=new a,this.randomPositions()}randomPositions(){const{config:e,positionData:t,sizeData:i}=this;this.center.toArray(t,0),i[0]=e.size0;for(let s=1;s<this.config.count;s++){const n=3*s;t[n]=k(10),t[n+1]=k(10),t[n+2]=k(10),i[s]=D(e.minSize,e.maxSize)}}update(e){const{config:t,center:i,positionData:s,sizeData:n,velocityData:o}=this;let r=0;t.controlSphere0&&(r=1,E.fromArray(s,0),E.lerp(i,.1).toArray(s,0),O.set(0,0,0).toArray(o,0));for(let i=r;i<this.config.count;i++){const r=3*i;F.fromArray(s,r),V.fromArray(o,r),V.y-=e.delta*t.gravity*n[i],V.multiplyScalar(t.friction),V.clampLength(0,t.maxVelocity),F.add(V),F.toArray(s,r),V.toArray(o,r)}for(let e=r;e<t.count;e++){const i=3*e;F.fromArray(s,i),V.fromArray(o,i);const r=n[e];for(let a=e+1;a<t.count;a++){const e=3*a;I.fromArray(s,e),N.fromArray(o,e);const t=n[a];B.copy(I).sub(F);const c=B.length(),h=r+t;if(c<h){const t=h-c;j.copy(B).normalize().multiplyScalar(.5*t),_.copy(j).multiplyScalar(Math.max(V.length(),1)),H.copy(j).multiplyScalar(Math.max(N.length(),1)),F.sub(j),V.sub(_),F.toArray(s,i),V.toArray(o,i),I.add(j),N.add(H),I.toArray(s,e),N.toArray(o,e)}}if(t.controlSphere0){B.copy(E).sub(F);const e=B.length(),t=r+n[0];if(e<t){const i=t-e;j.copy(B).normalize().multiplyScalar(i),_.copy(j).multiplyScalar(Math.max(V.length(),2)),F.sub(j),V.sub(_)}}Math.abs(F.x)+r>t.maxX&&(F.x=Math.sign(F.x)*(t.maxX-r),V.x=-V.x*t.wallBounce),0===t.gravity?Math.abs(F.y)+r>t.maxY&&(F.y=Math.sign(F.y)*(t.maxY-r),V.y=-V.y*t.wallBounce):F.y-r<-t.maxY&&(F.y=-t.maxY+r,V.y=-V.y*t.wallBounce);const a=Math.max(t.maxZ,t.maxSize);Math.abs(F.z)+r>a&&(F.z=Math.sign(F.z)*(t.maxZ-r),V.z=-V.z*t.wallBounce),F.toArray(s,i),V.toArray(o,i)}}}class T extends c{constructor(e){super(e);this.uniforms={thicknessDistortion:{value:.1},thicknessAmbient:{value:0},thicknessAttenuation:{value:.1},thicknessPower:{value:2},thicknessScale:{value:10}},this.defines.USE_UV="",this.onBeforeCompile=e=>{Object.assign(e.uniforms,this.uniforms),e.fragmentShader="\n        uniform float thicknessPower;\n        uniform float thicknessScale;\n        uniform float thicknessDistortion;\n        uniform float thicknessAmbient;\n        uniform float thicknessAttenuation;\n        uniform vec3 thicknessColor;\n      "+e.fragmentShader,e.fragmentShader=e.fragmentShader.replace("void main() {","\n        void RE_Direct_Scattering(const in IncidentLight directLight, const in vec2 uv, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, inout ReflectedLight reflectedLight) {\n          vec3 scatteringHalf = normalize(directLight.direction + (geometryNormal * thicknessDistortion));\n          float scatteringDot = pow(saturate(dot(geometryViewDir, -scatteringHalf)), thicknessPower) * thicknessScale;\n          vec3 scatteringIllu = (scatteringDot + thicknessAmbient) * vColor;\n          reflectedLight.directDiffuse += scatteringIllu * thicknessAttenuation * directLight.color;\n        }\n\n        void main() {\n      ");const t=h.lights_fragment_begin.replaceAll("RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );","\n          RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n          RE_Direct_Scattering(directLight, vUv, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, reflectedLight);\n        ");e.fragmentShader=e.fragmentShader.replace("#include <lights_fragment_begin>",t)}}}const Y={count:200,colors:[255,0,16777215],ambientColor:16777215,ambientIntensity:1,lightIntensity:200,materialParams:{metalness:.5,roughness:.5,clearcoat:1,clearcoatRoughness:.15},minSize:.5,maxSize:1,size0:1,gravity:.5,friction:.9975,wallBounce:.95,maxVelocity:.15,maxX:10,maxY:10,maxZ:2,controlSphere0:!1},X=new m;class U extends d{constructor(e,t={}){const i={...Y,...t},s=new w,n=new p(e,.04).fromScene(s).texture,o=new g,r=new T({envMap:n,...i.materialParams});r.envMapRotation.x=-Math.PI/2,super(o,r,i.count),this.config=i,this.physics=new W(i),this.initLights(),this.setColors(i.colors)}initLights(){this.ambientLight=new f(this.config.ambientColor,this.config.ambientIntensity),this.add(this.ambientLight),this.light=new u(this.config.colors[0],this.config.lightIntensity),this.add(this.light)}setColors(e){if(Array.isArray(e)&&e.length>1){const t=function(e){let t,i;return s(e),{setColors:s,getColorAt:function(e,s=new l){const n=Math.max(0,Math.min(1,e))*(t.length-1),o=Math.floor(n),r=i[o];if(o>=t.length-1)return r.clone();const a=n-o,c=i[o+1];return s.r=r.r+a*(c.r-r.r),s.g=r.g+a*(c.g-r.g),s.b=r.b+a*(c.b-r.b),s}};function s(e){t=e,i=[];const s=[];t.forEach((e=>{const t=new l(e);i.push(t),s.push("#"+t.getHexString())})),console.log(s)}}(e);for(let e=0;e<this.count;e++)this.setColorAt(e,t.getColorAt(e/this.count)),0===e&&this.light.color.copy(t.getColorAt(e/this.count));this.instanceColor.needsUpdate=!0}}update(e){this.physics.update(e);for(let e=0;e<this.count;e++)X.position.fromArray(this.physics.positionData,3*e),X.scale.setScalar(this.physics.sizeData[e]),X.updateMatrix(),this.setMatrixAt(e,X.matrix),0===e&&this.light.position.copy(X.position);this.instanceMatrix.needsUpdate=!0}}function Z(e,t){const i=new z({canvas:e,size:"parent",rendererOptions:{antialias:!0,alpha:!0}});i.camera.position.set(0,0,20),i.camera.lookAt(0,0,0),i.updateWorldSize();const s=new U(i.renderer,t);i.scene.add(s);const n=new v,o=new y(new a(0,0,1),0),r=new a;let c=!1;const h=A({domElement:e,onMove(){n.setFromCamera(h.nPosition,i.camera),i.camera.getWorldDirection(o.normal),n.ray.intersectPlane(o,r),s.physics.center.copy(r),s.config.controlSphere0=!0},onLeave(){s.config.controlSphere0=!1}});return i.onBeforeRender=e=>{c||s.update(e)},i.onAfterResize=e=>{s.config.maxX=e.wWidth/2,s.config.maxY=e.wHeight/2},{three:i,spheres:s,togglePause(){c=!c},dispose(){i.dispose()}}}export{Z as Spheres1Background};